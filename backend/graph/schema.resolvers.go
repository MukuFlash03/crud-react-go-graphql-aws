package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/MukuFlash03/task-manager/graph/model"
)

func (r *mutationResolver) CreateTask(ctx context.Context, input model.CreateTaskInput) (*model.Task, error) {
	task := &model.Task{
		ID:        fmt.Sprintf("%d", len(r.tasks)+1),
		Title:     input.Title,
		Completed: false,
	}
	r.tasks = append(r.tasks, task)
	return task, nil
}

func (r *mutationResolver) UpdateTask(ctx context.Context, id string, input model.UpdateTaskInput) (*model.Task, error) {
	var task *model.Task
	for _, t := range r.tasks {
		if t.ID == id {
			task = t
			break
		}
	}
	if task == nil {
		return nil, fmt.Errorf("task not found")
	}
	if input.Title != nil {
		task.Title = *input.Title
	}
	if input.Completed != nil {
		task.Completed = *input.Completed
	}
	return task, nil
}

func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (bool, error) {
	for i, task := range r.tasks {
		if task.ID == id {
			r.tasks = append(r.tasks[:i], r.tasks[i+1:]...)
			return true, nil
		}
	}
	return false, fmt.Errorf("task not found")
}

func (r *queryResolver) Tasks(ctx context.Context) ([]*model.Task, error) {
	return r.tasks, nil
}

func (r *queryResolver) Task(ctx context.Context, id string) (*model.Task, error) {
	for _, task := range r.tasks {
		if task.ID == id {
			return task, nil
		}
	}
	return nil, fmt.Errorf("task not found")
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
