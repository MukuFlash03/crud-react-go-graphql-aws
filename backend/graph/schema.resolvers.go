package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"fmt"
	"context"
	"strconv"
	
	"github.com/MukuFlash03/task-manager/graph/model"
	"github.com/MukuFlash03/task-manager/internal/tasks"
	"github.com/MukuFlash03/task-manager/pkg/utils"
)

func (r *mutationResolver) CreateTask(ctx context.Context, input model.CreateTaskInput) (*model.Task, error) {
	var task tasks.Task
	task.Title = input.Title
	taskID := task.Save()
	return &model.Task{ID: strconv.FormatInt(taskID, 10), Title:task.Title}, nil
}

func (r *mutationResolver) UpdateTask(ctx context.Context, id string, input model.UpdateTaskInput) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: UpdateTask - updateTask"))
}

func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTask - deleteTask"))
}

func (r *queryResolver) Tasks(ctx context.Context) ([]*model.Task, error) {
	var resultTasks []*model.Task
	var dbTasks []tasks.Task
	dbTasks = tasks.GetAll()
	for _, task := range dbTasks{
		resultTasks = append(resultTasks, &model.Task{ID:task.ID, Title:task.Title, Completed:task.Completed})
	}
	return resultTasks, nil
}

func (r *queryResolver) Task(ctx context.Context, title string) (*model.Task, error) {
	var resultTask *model.Task
	var dbTask tasks.Task
	var err error
	dbTask, err = tasks.GetTaskIdByTitle(title)
	utils.CheckError(err, "fatal")

	resultTask = &model.Task{ID:dbTask.ID, Title:dbTask.Title, Completed:dbTask.Completed}
	
	return resultTask, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
